package com.example.android.effectivenavigation;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.Socket;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

import android.app.Activity;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.preference.PreferenceManager;
import android.widget.TextView;
import android.widget.Toast;

public class RabbitHelper extends AsyncTask<Object, Object, String> {
	public Activity Context;

	private TransferData runCommand(Object... commands) {
		String command = commands[0].toString();

		try {

			String sentence;
			String modifiedSentence = "";

			SharedPreferences settings = PreferenceManager
					.getDefaultSharedPreferences(Context);

			String ip = settings.getString("prefHomeIp", "192.168.1.3");

			ConnectionFactory factory = new ConnectionFactory();
			factory.setHost(ip);
			Connection connection = factory.newConnection();
			Channel channel = connection.createChannel();

			channel.queueDeclare("helloWorld", false, false, false, null);
			String message = command;
			channel.basicPublish("", "helloWorld", null, message.getBytes());

			channel.close();
			connection.close();

		} catch (Exception ex) {

		}
		return null;

	}
	
	protected void onPostExecute(String result) {
		Toast.makeText((Activity) Context, "Message Sent", Toast.LENGTH_SHORT).show();
	}

	public void Run(String command, Activity context) {
		execute(command, context);
	}
	

	@Override
	protected String doInBackground(Object... params) {
		Context = (Activity) params[1];
		final TransferData transferData = runCommand(params);

		switch (transferData.CommandType) {
		case 1:
			break;
		case 4:
			break;
		case 3:
			break;
		case 2:
			break;
		case 5:
			Context.runOnUiThread(new Runnable() {

				@Override
				public void run() {
					TextView nextShutdownTextView = (TextView) Context
							.findViewById(R.id.nextShutdownTextView);
					nextShutdownTextView.setText(transferData.Message);
				}
			});

			break;
		default:
			break;
		}

		return transferData.Message;
	}

}